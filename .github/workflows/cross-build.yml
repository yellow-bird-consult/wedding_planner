# name: Rust Cross-Compile and Release

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     name: Cross-Compile and Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install Rust and cross
#         run: |
#           docker pull rustembedded/cross:aarch64-unknown-linux-gnu
#           docker pull rustembedded/cross:x86_64-unknown-linux-gnu
#           curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#           source $HOME/.cargo/env
#           cargo install cross

#       - name: Install M1 toolchain
#         if: runner.os == 'macos'
#         run: rustup target add aarch64-apple-darwin

#       - name: Determine the current version
#         id: get_version
#         run: echo "::set-output name=version::$(cat Cargo.toml | grep version | head -n1 | cut -d '\"' -f2)"

#       - name: Increment the version number
#         id: increment_version
#         run: |
#           IFS='.' read -r -a version_array <<< "${{ steps.get_version.outputs.version }}"
#           (( version_array[1] += 1 ))
#           new_version="${version_array[0]}.${version_array[1]}.0"
#           echo "::set-output name=new_version::$new_version"

#       - name: Cross-compile for Linux x86_64
#         run: cross build --release --target x86_64-unknown-linux-gnu
#       - name: Cross-compile for Linux ARMv7
#         run: cross build --release --target armv7-unknown-linux-gnueabihf
#       - name: Cross-compile for macOS x86_64
#         run: cross build --release --target x86_64-apple-darwin
#       - name: Cross-compile for macOS ARM64
#         if: runner.os == 'macos'
#         run: cross build --release --target aarch64-apple-darwin

#       - name: Create Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: |
#             target/x86_64-unknown-linux-gnu/release/myapp
#             target/armv7-unknown-linux-gnueabihf/release/myapp
#             target/x86_64-apple-darwin/release/myapp
#             target/aarch64-apple-darwin/release/myapp
#           token: ${{ secrets.GITHUB_TOKEN }}
#           tag_name: v${{ steps.increment_version.outputs.new_version }}
#           target_commitish: ${{ github.sha }}
#           name: v${{ steps.increment_version.outputs.new_version }}
#           body: Release v${{ steps.increment_version.outputs.new_version }}

#   build-mac:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Cache Rust dependencies
#         uses: actions/cache@v1.0.1
#         with:
#           path: target
#           key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
#           restore-keys: |
#             ${{ runner.OS }}-build-
#       - name: Install latest rust toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: beta
#           target: x86_64-apple-darwin
#           default: true
#           override: true

#       - name: Build for mac
#         run: cargo build --all --release && strip target/release/rust-aha-cli && mv target/release/rust-aha-cli target/release/#{your final bin name here}

#       - name: Upload binaries to release
#         uses: svenstaro/upload-release-action@v1-release
#         with:
#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           file: target/release/#{your final bin name here}
#           asset_name: #{your final bin name here}
#           tag: build-${{ github.ref }}


# Instruction + template repo: https://github.com/FedericoPonzi/rust-ci
name: cross-build

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  deploy:
    name: deploy
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabi
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os: macOS-latest
            target: aarch64-apple-darwin
          - os: macOS-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.config.target }}

      - name: Build target
        if: matrix.config.os == 'ubuntu-latest'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.config.target }} --manifest-path ./Cargo.toml

      - name: Build Apple targets
        if: matrix.config.os == 'macOS-latest'
        shell: bash
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target ${{ matrix.config.target }} --manifest-path ./Cargo.toml

      - name: Package
        shell: bash
        run: |
          #strip target/${{ matrix.config.target }}/release/wedp     
          tar -czvf ./wedp-${{ matrix.config.target }}.tar.gz -C ./target/${{ matrix.config.target }}/release/ wedp
      - name: Publish
        uses: softprops/action-gh-release@v1
        # TODO: if any of the build step fails, the release should be deleted.
        with:
          files: "wedp*.tar.gz"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           file: target/release/#{your final bin name here}
#           asset_name: #{your final bin name here}
#           tag: build-${{ github.ref }}